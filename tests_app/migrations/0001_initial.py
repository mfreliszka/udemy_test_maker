# Generated by Django 5.2.4 on 2025-07-26 16:00

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('google_cloud_developer', 'Google Professional Cloud Developer'), ('google_cloud_architect', 'Google Professional Cloud Architect'), ('google_cloud_engineer', 'Google Cloud Associate Engineer'), ('google_cloud_security', 'Google Professional Cloud Security Engineer'), ('google_cloud_data_engineer', 'Google Professional Data Engineer'), ('google_cloud_devops', 'Google Professional Cloud DevOps Engineer'), ('aws_solutions_architect', 'AWS Certified Solutions Architect'), ('aws_developer', 'AWS Certified Developer'), ('aws_sysops', 'AWS Certified SysOps Administrator')], max_length=100, unique=True)),
                ('display_name', models.CharField(help_text='Full display name of the exam', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of the exam content and objectives')),
                ('provider', models.CharField(default='Google Cloud', help_text='Certification provider (Google Cloud, AWS, etc.)', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this exam is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Exam',
                'verbose_name_plural': 'Exams',
                'ordering': ['provider', 'display_name'],
            },
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Domain name (e.g., 'Section 1: Designing applications')", max_length=200)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the domain content')),
                ('order', models.PositiveIntegerField(default=1, help_text='Order of the domain in the exam')),
                ('weight_percentage', models.DecimalField(blank=True, decimal_places=2, help_text='Percentage weight of this domain in the exam (0-100%)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='domains', to='tests_app.exam')),
            ],
            options={
                'verbose_name': 'Domain',
                'verbose_name_plural': 'Domains',
                'ordering': ['exam', 'order', 'name'],
                'unique_together': {('exam', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_number', models.PositiveIntegerField(help_text='Test number (typically 1-15, up to 50 for flexibility)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('question_text', models.TextField(help_text='The main question text')),
                ('question_type', models.CharField(choices=[('multiple_select', 'Multiple Select (default)'), ('multiple_choice', 'Multiple Choice (single answer)')], default='multiple_choice', help_text='Type of question (multiple choice or multiple select)', max_length=20)),
                ('overall_explanation', models.TextField(blank=True, help_text='Overall explanation for the question (why the correct answers are correct)')),
                ('difficulty', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='intermediate', help_text='Difficulty level of the question', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this question is active')),
                ('created_by', models.CharField(blank=True, help_text='Who created this question', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='tests_app.domain')),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='tests_app.exam')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'ordering': ['exam', 'test_number', 'domain', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.TextField(help_text='The answer option text')),
                ('is_correct', models.BooleanField(default=False, help_text='Whether this answer is correct')),
                ('explanation', models.TextField(blank=True, help_text='Explanation for why this answer is correct or incorrect (optional)')),
                ('order', models.PositiveIntegerField(default=1, help_text='Order of this answer option (1-7, typically 3-6 answers per question)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='tests_app.question')),
            ],
            options={
                'verbose_name': 'Answer',
                'verbose_name_plural': 'Answers',
                'ordering': ['question', 'order'],
            },
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['exam', 'test_number'], name='tests_app_q_exam_id_116b58_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['domain'], name='tests_app_q_domain__86d216_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['question_type'], name='tests_app_q_questio_61165c_idx'),
        ),
        migrations.AddIndex(
            model_name='answer',
            index=models.Index(fields=['question', 'order'], name='tests_app_a_questio_7facac_idx'),
        ),
        migrations.AddIndex(
            model_name='answer',
            index=models.Index(fields=['is_correct'], name='tests_app_a_is_corr_e1475d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='answer',
            unique_together={('question', 'order')},
        ),
    ]
